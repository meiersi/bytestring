------------------------------------------------------------------------
                       fps : Fast Packed Strings
------------------------------------------------------------------------

This library provides a FastPackedString library: byte arrays
manipulable as strings, providing very time and space efficient string
and IO operations.

Requirements:
        > Cabal

Building:
        > chmod +x Setup.hs
        > ./Setup.hs configure --prefix=/f/g
        > ./Setup.hs build
        > ./Setup.hs install

If you wish to use the mmap extensions:

        > mv fps.cabal.mmap fps.cabal

as your first step.

After installation, you can run the testsuite:

        > cd tests ; make ; make run

------------------------------------------------------------------------

Authors:
    FastPackedString is derived from the GHC PackedString library, 
    originallly written by Bryan O'Sullivan, and then by Simon Marlow.
    It was adapted, and greatly extended for darcs by David Roundy, and
    others. Don Stewart cleaned up and further extended the implementation.

------------------------------------------------------------------------

Performance, some random numbers:

This table compares the performance of common operations in both
PackedString and FastPackedString, on various packed strings.

------------------------------------------------------------------------

Input with packed strings:

            FastPackedString       PackedString

            mmapFile               hGetPS
            user  system total     user  system total
10k         0.01  0.00  0.005      0.01  0.01  0.014
128k        0.00  0.00  0.010      0.18  0.02  0.208
1M          0.00  0.00  0.010      Stack space overflow
10M         0.01  0.01  0.011      ~
50M         0.00  0.01  0.010      ~
100M        0.00  0.00  0.010      ~
500M        0.00  0.00  0.010      ~
1G          0.00  0.00  0.010      ~

------------------------------------------------------------------------

Packing a [Char]:

            readFile >>= pack      readFile >>= packString
            user  system total     user  system total
10k         0.00 0.00  0.009       0.00  0.01  0.005
128k        0.03 0.00  0.035       0.03  0.01  0.037
1M          0.30 0.03  0.331       0.22  0.02  0.249
10M         2.89 1.22 26.129       2.09  0.24  2.392
50M         out of memory          out of memory

------------------------------------------------------------------------

Unpacking:

            mmapFile >>= unpack    hGetPS >>= unpackPS
            user  system total     user  system total
10k         0.00  0.00  0.004      0.00  0.01   0.008
128k        0.02  0.02  0.029      0.11  0.01   0.121 
1M          0.27  0.03  0.300      Stack space overflow 
10M         2.69  0.20  2.951      ~
50M         out of memory          ~


------------------------------------------------------------------------

Profiling results for various list-like operations.
(Remember that FastStrings are allocated in C land, so don't appear in
the heap usage). As some code was very fast, each operation was repeated
1,000,000 times per run.

Input size:          128k
Input style:         mmapFile       hGetBuf

                    FastString      PackedString
                    user            user 
    ==              1.15            1.27
    compare         1.08            1.16
    length          1.26            1.23    *
    cons            1.20            1.27
    head            1.12            1.28
    tail            1.26            1.27
    append          1.11            1.44
    index           1.07            1.24
    map toUpper     1.18            1.28
    filter (== 'a') 1.25            1.26
foldl (\x _ -> x+1) 1.21            1.26
foldr (\_ x -> x+1) 1.34            1.30    *
    elem 'x'        1.14            1.30
    lines           1.20            1.27
    reverse         1.22            1.38

Actually looping is dominating :/

------------------------------------------------------------------------

Equality on 1G packed strings:
            0.76 3.80 1:26.86      ~

Some operations on a 200M packed string (FastPackedString only):
reverse     0.41 0.77 30.534
sort       15.04 3.74 54.737
